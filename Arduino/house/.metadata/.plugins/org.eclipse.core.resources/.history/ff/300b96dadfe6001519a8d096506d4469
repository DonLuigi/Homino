#include "EthernetW5100Component.h"

char* EthernetW5100Component::messageMagicCookie = "MGCK";

EthernetW5100Component::EthernetW5100Component (byte* mac, IPAddress* ipAddress, uint16_t serverPort, char* name, bool report) :
    Component (name, report), tcpServer (serverPort)
{
    this->mac = mac;
    this->ipAddress = ipAddress;
    this->serverPort = serverPort;
    tcpClient = NULL;
}

void EthernetW5100Component::setup ()
{
    Ethernet.begin (mac, *ipAddress);
    tcpServer.begin ();

    COA_DEBUG ("ETH[%s]:IP=", name, Ethernet.localIP ());
}

void EthernetW5100Component::read (Message* message)
{
    int bufferSize = message->getSize ();
    if (bufferSize != 0)
    {
        return;
    }

    if (tcpClient == NULL)
    {
        return;
    }

    // magic cookie
    tcpClient->write (messageMagicCookie, strlen (messageMagicCookie));

    // size
    char* buffer = message->getBuffer ();

    tcpClient->write (bufferSize >> 8);
    tcpClient->write (bufferSize & 0xFF);

    // payload
    tcpClient->write (buffer, bufferSize);

    tcpClient->flush ();

    message->clear ();
}

void EthernetW5100Component::write (Message* message)
{
    if (message->getSize () != 0)
    {
        return;
    }

    EthernetClient client = tcpServer.available ();
    if (client == NULL)
    {
        return;
    }

    uint8_t byteRead;
    uint16_t available = client.available ();
    if (available > 0)
    {
        // magic cookie
        for (uint8_t i = 0; i < sizeof(messageMagicCookie); i++)
        {
            byteRead = client.read ();
            if (byteRead != messageMagicCookie[i])
            {
                message->populate ("ETH_INV_MAGIC");
                return;
            }
        }

        // size
        uint16_t size = client.read () & 0xFF;
        byteRead = client.read ();

        size = (size << 8) + byteRead;

        if (size >= message->getCapacity ())
        {
            message->populate ("ETH_INV_SIZE,%d", size);
            return;
        }

        // payload
        char* buffer = message->getBuffer ();
        for (uint16_t i = 0; i < size; i++)
        {
            buffer[i] = client.read ();
        }

        message->parse (size);
    }
}
